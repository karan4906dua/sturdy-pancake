{"ast":null,"code":"import Denque from 'denque';\nexport default class Pathfinder {\n  constructor(board, start, _finish, updateNodeIsVisited, _updateNodeIsShortest, _delayedIteration) {\n    this.clearTimers = () => {\n      while (!this.timers.isEmpty()) {\n        let timer = this.timers.shift();\n        timer.clear();\n      }\n      this.timers.clear();\n    };\n    this.pauseTimers = () => {\n      this.timers.toArray().forEach(timer => timer.pause());\n    };\n    this.resumeTimers = () => {\n      this.timers.toArray().forEach(timer => timer.resume());\n    };\n    this.traceShortestPath = timeCounter => {\n      const {\n        finish,\n        prev,\n        updateNodeIsShortest,\n        delayedIteration\n      } = this;\n      const path = [];\n      let {\n        x,\n        y\n      } = prev[finish.y][finish.x];\n      while (prev[y][x].x !== -1 && prev[y][x].y !== -1) {\n        path.push({\n          x,\n          y\n        });\n        const tempX = x;\n        const tempY = y;\n        x = prev[tempY][tempX].x;\n        y = prev[tempY][tempX].y;\n      }\n      for (let i = path.length - 1; i >= 0; --i) {\n        x = path[i].x;\n        y = path[i].y;\n\n        //timeCounter is 0 if delayedIteration is false\n        updateNodeIsShortest(y, x, true, timeCounter * delayedIteration, delayedIteration);\n        timeCounter += 1;\n      }\n      return timeCounter;\n    };\n    this.start = start;\n    this.finish = _finish;\n    this.updateNodeIsVisited = updateNodeIsVisited;\n    this.updateNodeIsShortest = _updateNodeIsShortest;\n    this.delayedIteration = _delayedIteration;\n    this._init(board);\n    this.timers = new Denque();\n  }\n  _init(board) {\n    this.board = [];\n    this.dist = [];\n    this.visited = [];\n    this.prev = [];\n    for (let i = 0; i < board.length; ++i) {\n      this.board[i] = [];\n      this.dist[i] = [];\n      this.visited[i] = [];\n      this.prev[i] = [];\n      for (let j = 0; j < board[i].length; ++j) {\n        this.board[i][j] = {\n          type: board[i][j].type\n        };\n        this.dist[i][j] = Infinity;\n        this.visited[i][j] = false;\n        this.prev[i][j] = {\n          x: -1,\n          y: -1\n        };\n      }\n    }\n    this.closed = this.visited;\n  }\n}\nPathfinder.dx = [0, 0, -1, 1];\nPathfinder.dy = [-1, 1, 0, 0];","map":{"version":3,"names":["Denque","Pathfinder","constructor","board","start","finish","updateNodeIsVisited","updateNodeIsShortest","delayedIteration","clearTimers","timers","isEmpty","timer","shift","clear","pauseTimers","toArray","forEach","pause","resumeTimers","resume","traceShortestPath","timeCounter","prev","path","x","y","push","tempX","tempY","i","length","_init","dist","visited","j","type","Infinity","closed","dx","dy"],"sources":["/home/sanyam/Desktop/PathFinding Visualizer/src/algorithms/Pathfinder.js"],"sourcesContent":["import Denque from 'denque';\nexport default class Pathfinder {\n  constructor(\n    board,\n    start,\n    finish,\n    updateNodeIsVisited,\n    updateNodeIsShortest,\n    delayedIteration\n  ) {\n    this.start = start;\n    this.finish = finish;\n    this.updateNodeIsVisited = updateNodeIsVisited;\n    this.updateNodeIsShortest = updateNodeIsShortest;\n    this.delayedIteration = delayedIteration;\n    this._init(board);\n    this.timers = new Denque();\n  }\n\n  static dx = [0, 0, -1, 1];\n  static dy = [-1, 1, 0, 0];\n\n  _init(board) {\n    this.board = [];\n    this.dist = [];\n    this.visited = [];\n    this.prev = [];\n    for (let i = 0; i < board.length; ++i) {\n      this.board[i] = [];\n      this.dist[i] = [];\n      this.visited[i] = [];\n      this.prev[i] = [];\n      for (let j = 0; j < board[i].length; ++j) {\n        this.board[i][j] = { type: board[i][j].type };\n        this.dist[i][j] = Infinity;\n        this.visited[i][j] = false;\n        this.prev[i][j] = { x: -1, y: -1 };\n      }\n    }\n    this.closed = this.visited;\n  }\n\n  clearTimers = () => {\n    while (!this.timers.isEmpty()) {\n      let timer = this.timers.shift();\n      timer.clear();\n    }\n    this.timers.clear();\n  };\n\n  pauseTimers = () => {\n    this.timers.toArray().forEach((timer) => timer.pause());\n  };\n\n  resumeTimers = () => {\n    this.timers.toArray().forEach((timer) => timer.resume());\n  };\n\n  // returns latest timeCounter\n  traceShortestPath = (timeCounter) => {\n    const { finish, prev, updateNodeIsShortest, delayedIteration } = this;\n\n    const path = [];\n    let { x, y } = prev[finish.y][finish.x];\n\n    while (prev[y][x].x !== -1 && prev[y][x].y !== -1) {\n      path.push({ x, y });\n      const tempX = x;\n      const tempY = y;\n      x = prev[tempY][tempX].x;\n      y = prev[tempY][tempX].y;\n    }\n\n    for (let i = path.length - 1; i >= 0; --i) {\n      x = path[i].x;\n      y = path[i].y;\n\n      //timeCounter is 0 if delayedIteration is false\n      updateNodeIsShortest(\n        y,\n        x,\n        true,\n        timeCounter * delayedIteration,\n        delayedIteration\n      );\n      timeCounter += 1;\n    }\n    return timeCounter;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}