{"ast":null,"code":"// Node Types\nexport const NODE_START = 'node-start';\nexport const NODE_FINISH = 'node-finish';\nexport const NODE_INITIAL = 'node-initial';\nexport const NODE_WALL = 'node-wall';\nexport const NODE_VISITED = 'node-visited';\nexport const NODE_SHORTEST = 'node-shortest-path';\nexport const NODE_WEIGHT_10 = 'node-weight-10';\nexport const NODE_WEIGHT_20 = 'node-weight-20';\nexport const NODE_WEIGHT_30 = 'node-weight-30';\nexport const NODE_WEIGHT_40 = 'node-weight-40';\nexport const NODE_WEIGHT_50 = 'node-weight-50';\n\n// Delay Interval\nexport const DELAY_SLOW = 200;\nexport const DELAY_NORMAL = 50;\nexport const DELAY_FAST = 20;\nexport const DELAY_SPEEDS = [{\n  value: DELAY_SLOW,\n  name: 'Slow'\n}, {\n  value: DELAY_NORMAL,\n  name: 'Normal'\n}, {\n  value: DELAY_FAST,\n  name: 'Fast'\n}];\n\n// Pathfinding Algorithms\nexport const DIJKSTRA = 'dijkstra';\nexport const A_STAR = 'a-star';\nexport const BFS = 'BFS';\nexport const DFS = 'DFS';\nexport const ALGORITHM_TYPES = [{\n  value: DIJKSTRA,\n  name: \"Dijkstra's algorithm\"\n}, {\n  value: A_STAR,\n  name: 'A* search'\n}, {\n  value: BFS,\n  name: 'Breadth-first search'\n}, {\n  value: DFS,\n  name: 'Depth-first search'\n}];\n\n// Editing Modes\nexport const IDLE = 'idle';\nexport const DRAGGING_START = 'dragging-start';\nexport const DRAGGING_FINISH = 'dragging-finish';\nexport const DRAWING = 'drawing';\nexport const ERASING = 'erasing';\n\n// Node Weight Mapping\nexport const WEIGHT_MAPPING = {\n  [NODE_INITIAL]: 1,\n  [NODE_WEIGHT_10]: 10,\n  [NODE_WEIGHT_20]: 20,\n  [NODE_WEIGHT_30]: 30,\n  [NODE_WEIGHT_40]: 40,\n  [NODE_WEIGHT_50]: 50,\n  [NODE_WALL]: 60 // Conceptually Infinity\n};\n\n// Node Weight Reverse Mapping\nexport const WEIGHT_REVERSE = {};\nWEIGHT_REVERSE[10] = NODE_WEIGHT_10;\nWEIGHT_REVERSE[20] = NODE_WEIGHT_20;\nWEIGHT_REVERSE[30] = NODE_WEIGHT_30;\nWEIGHT_REVERSE[40] = NODE_WEIGHT_40;\nWEIGHT_REVERSE[50] = NODE_WEIGHT_50;\nWEIGHT_REVERSE[60] = NODE_WALL;\n\n// Marks array for weight/wall slider\nexport const MARKS = [{\n  value: 10,\n  label: '10'\n}, {\n  value: 20,\n  label: '20'\n}, {\n  value: 30,\n  label: '30'\n}, {\n  value: 40,\n  label: '40'\n}, {\n  value: 50,\n  label: '50'\n}, {\n  value: 60,\n  label: 'Wall'\n}];","map":{"version":3,"names":["NODE_START","NODE_FINISH","NODE_INITIAL","NODE_WALL","NODE_VISITED","NODE_SHORTEST","NODE_WEIGHT_10","NODE_WEIGHT_20","NODE_WEIGHT_30","NODE_WEIGHT_40","NODE_WEIGHT_50","DELAY_SLOW","DELAY_NORMAL","DELAY_FAST","DELAY_SPEEDS","value","name","DIJKSTRA","A_STAR","BFS","DFS","ALGORITHM_TYPES","IDLE","DRAGGING_START","DRAGGING_FINISH","DRAWING","ERASING","WEIGHT_MAPPING","WEIGHT_REVERSE","MARKS","label"],"sources":["/home/sanyam/Desktop/PathFinding Visualizer/src/constants.js"],"sourcesContent":["// Node Types\nexport const NODE_START = 'node-start';\nexport const NODE_FINISH = 'node-finish';\nexport const NODE_INITIAL = 'node-initial';\nexport const NODE_WALL = 'node-wall';\n\nexport const NODE_VISITED = 'node-visited';\nexport const NODE_SHORTEST = 'node-shortest-path';\n\nexport const NODE_WEIGHT_10 = 'node-weight-10';\nexport const NODE_WEIGHT_20 = 'node-weight-20';\nexport const NODE_WEIGHT_30 = 'node-weight-30';\nexport const NODE_WEIGHT_40 = 'node-weight-40';\nexport const NODE_WEIGHT_50 = 'node-weight-50';\n\n// Delay Interval\nexport const DELAY_SLOW = 200;\nexport const DELAY_NORMAL = 50;\nexport const DELAY_FAST = 20;\n\nexport const DELAY_SPEEDS = [\n  { value: DELAY_SLOW, name: 'Slow' },\n  { value: DELAY_NORMAL, name: 'Normal' },\n  { value: DELAY_FAST, name: 'Fast' },\n];\n\n// Pathfinding Algorithms\nexport const DIJKSTRA = 'dijkstra';\nexport const A_STAR = 'a-star';\nexport const BFS = 'BFS';\nexport const DFS = 'DFS';\n\nexport const ALGORITHM_TYPES = [\n  { value: DIJKSTRA, name: \"Dijkstra's algorithm\" },\n  { value: A_STAR, name: 'A* search' },\n  { value: BFS, name: 'Breadth-first search' },\n  { value: DFS, name: 'Depth-first search' },\n];\n\n// Editing Modes\nexport const IDLE = 'idle';\nexport const DRAGGING_START = 'dragging-start';\nexport const DRAGGING_FINISH = 'dragging-finish';\nexport const DRAWING = 'drawing';\nexport const ERASING = 'erasing';\n\n// Node Weight Mapping\nexport const WEIGHT_MAPPING = {\n  [NODE_INITIAL]: 1,\n  [NODE_WEIGHT_10]: 10,\n  [NODE_WEIGHT_20]: 20,\n  [NODE_WEIGHT_30]: 30,\n  [NODE_WEIGHT_40]: 40,\n  [NODE_WEIGHT_50]: 50,\n  [NODE_WALL]: 60, // Conceptually Infinity\n};\n\n// Node Weight Reverse Mapping\nexport const WEIGHT_REVERSE = {};\nWEIGHT_REVERSE[10] = NODE_WEIGHT_10;\nWEIGHT_REVERSE[20] = NODE_WEIGHT_20;\nWEIGHT_REVERSE[30] = NODE_WEIGHT_30;\nWEIGHT_REVERSE[40] = NODE_WEIGHT_40;\nWEIGHT_REVERSE[50] = NODE_WEIGHT_50;\nWEIGHT_REVERSE[60] = NODE_WALL;\n\n// Marks array for weight/wall slider\nexport const MARKS = [\n  {\n    value: 10,\n    label: '10',\n  },\n  {\n    value: 20,\n    label: '20',\n  },\n  {\n    value: 30,\n    label: '30',\n  },\n  {\n    value: 40,\n    label: '40',\n  },\n  {\n    value: 50,\n    label: '50',\n  },\n  {\n    value: 60,\n    label: 'Wall',\n  },\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}