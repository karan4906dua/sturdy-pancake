{"ast":null,"code":"var _jsxFileName = \"/home/sanyam/Desktop/PathFinding Visualizer/src/components/Board/Board.jsx\";\nimport React from 'react';\nimport Node from '../Node/Node';\nimport './Board.css';\nimport { IDLE, DRAGGING_START, DRAGGING_FINISH, DRAWING, ERASING, NODE_INITIAL } from '../../constants';\nimport { isFinishPos, isStartOrFinishPos, isStartPos } from '../../utils';\nexport default class Board extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.handlePointerDown = e => {\n      const {\n        start,\n        finish,\n        updateNodeType,\n        drawType\n      } = this.props;\n      if (!e.target.classList.contains('board__node')) {\n        return;\n      }\n      const rowIdx = Number(e.target.dataset.rowIdx);\n      const colIdx = Number(e.target.dataset.colIdx);\n      if (isStartPos(colIdx, rowIdx, start)) {\n        this.mode = DRAGGING_START;\n      } else if (isFinishPos(colIdx, rowIdx, finish)) {\n        this.mode = DRAGGING_FINISH;\n      } else {\n        // e.target.dataset.type === NODE_INITIAL\n        if (e.target.className === 'board__node') {\n          this.mode = DRAWING;\n          updateNodeType(rowIdx, colIdx, drawType.current); // NODE_WALL\n        } else {\n          this.mode = ERASING;\n          updateNodeType(rowIdx, colIdx, NODE_INITIAL);\n        }\n      }\n    };\n    this.handlePointerUp = () => {\n      this.mode = IDLE;\n    };\n    this.handlePointerMove = e => {\n      let {\n        start,\n        finish\n      } = this.props;\n      const {\n        updateNodeType,\n        drawType\n      } = this.props;\n      const realTarget = e.type !== 'touchmove' ? e.target : document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY);\n      if (!realTarget.classList.contains('board__node')) {\n        return;\n      }\n      const rowIdx = Number(realTarget.dataset.rowIdx);\n      const colIdx = Number(realTarget.dataset.colIdx);\n      switch (this.mode) {\n        case DRAGGING_START:\n          if (isStartOrFinishPos(colIdx, rowIdx, start, finish)) {\n            return;\n          }\n          this.moveNodePos(rowIdx, colIdx, start);\n          this.recomputeShortestPath();\n          break;\n        case DRAGGING_FINISH:\n          if (isStartOrFinishPos(colIdx, rowIdx, start, finish)) {\n            return;\n          }\n          this.moveNodePos(rowIdx, colIdx, finish);\n          this.recomputeShortestPath();\n          break;\n        case DRAWING:\n          updateNodeType(rowIdx, colIdx, drawType.current); // NODE_WALL\n          break;\n        case ERASING:\n          updateNodeType(rowIdx, colIdx, NODE_INITIAL);\n          break;\n      }\n    };\n    this.moveNodePos = (rowIdx, colIdx, nodePos) => {\n      const {\n        updateNodeCache\n      } = this.props;\n      const prevX = nodePos.x;\n      const prevY = nodePos.y;\n      nodePos.y = rowIdx;\n      nodePos.x = colIdx;\n      updateNodeCache.get(`${prevY}-${prevX}`).forceNodeUpdate();\n      updateNodeCache.get(`${rowIdx}-${colIdx}`).forceNodeUpdate();\n    };\n    this.recomputeShortestPath = () => {\n      const {\n        canDragToVisualize,\n        clearBoard,\n        initPathfinder,\n        pathfinder\n      } = this.props;\n      if (canDragToVisualize.current) {\n        clearBoard(false);\n        initPathfinder(false);\n        pathfinder.current.run();\n      }\n    };\n    this.mode = IDLE;\n  }\n  componentDidMount() {\n    window.addEventListener('mouseup', this.handlePointerUp);\n    window.addEventListener('touchend', this.handlePointerUp);\n    window.addEventListener('touchcancel', this.handlePointerUp);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('mouseup', this.handlePointerUp);\n    window.removeEventListener('touchend', this.handlePointerUp);\n    window.removeEventListener('touchcancel', this.handlePointerUp);\n  }\n\n  // Event handlers\n\n  render() {\n    const {\n      board,\n      start,\n      finish,\n      updateNodeCache\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"board\",\n      onMouseDown: this.handlePointerDown,\n      onMouseMove: this.handlePointerMove,\n      onTouchStart: this.handlePointerDown,\n      onTouchMove: this.handlePointerMove,\n      onTouchEnd: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, board.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        id: `row-${rowIdx}`,\n        className: \"board__row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, row.map((col, colIdx) => {\n        return /*#__PURE__*/React.createElement(Node, {\n          key: `${rowIdx}-${colIdx}`,\n          rowIdx: rowIdx,\n          colIdx: colIdx,\n          start: start,\n          finish: finish,\n          updateNodeCache: updateNodeCache,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n}","map":{"version":3,"names":["React","Node","IDLE","DRAGGING_START","DRAGGING_FINISH","DRAWING","ERASING","NODE_INITIAL","isFinishPos","isStartOrFinishPos","isStartPos","Board","PureComponent","constructor","props","handlePointerDown","e","start","finish","updateNodeType","drawType","target","classList","contains","rowIdx","Number","dataset","colIdx","mode","className","current","handlePointerUp","handlePointerMove","realTarget","type","document","elementFromPoint","touches","clientX","clientY","moveNodePos","recomputeShortestPath","nodePos","updateNodeCache","prevX","x","prevY","y","get","forceNodeUpdate","canDragToVisualize","clearBoard","initPathfinder","pathfinder","run","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","board","createElement","id","onMouseDown","onMouseMove","onTouchStart","onTouchMove","onTouchEnd","preventDefault","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","row","key","col"],"sources":["/home/sanyam/Desktop/PathFinding Visualizer/src/components/Board/Board.jsx"],"sourcesContent":["import React from 'react';\nimport Node from '../Node/Node';\nimport './Board.css';\nimport {\n  IDLE,\n  DRAGGING_START,\n  DRAGGING_FINISH,\n  DRAWING,\n  ERASING,\n  NODE_INITIAL,\n} from '../../constants';\nimport { isFinishPos, isStartOrFinishPos, isStartPos } from '../../utils';\n\nexport default class Board extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.mode = IDLE;\n  }\n\n  componentDidMount() {\n    window.addEventListener('mouseup', this.handlePointerUp);\n    window.addEventListener('touchend', this.handlePointerUp);\n    window.addEventListener('touchcancel', this.handlePointerUp);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('mouseup', this.handlePointerUp);\n    window.removeEventListener('touchend', this.handlePointerUp);\n    window.removeEventListener('touchcancel', this.handlePointerUp);\n  }\n\n  // Event handlers\n  handlePointerDown = (e) => {\n    const { start, finish, updateNodeType, drawType } = this.props;\n\n    if (!e.target.classList.contains('board__node')) {\n      return;\n    }\n\n    const rowIdx = Number(e.target.dataset.rowIdx);\n    const colIdx = Number(e.target.dataset.colIdx);\n    if (isStartPos(colIdx, rowIdx, start)) {\n      this.mode = DRAGGING_START;\n    } else if (isFinishPos(colIdx, rowIdx, finish)) {\n      this.mode = DRAGGING_FINISH;\n    } else {\n      // e.target.dataset.type === NODE_INITIAL\n      if (e.target.className === 'board__node') {\n        this.mode = DRAWING;\n        updateNodeType(rowIdx, colIdx, drawType.current); // NODE_WALL\n      } else {\n        this.mode = ERASING;\n        updateNodeType(rowIdx, colIdx, NODE_INITIAL);\n      }\n    }\n  };\n\n  handlePointerUp = () => {\n    this.mode = IDLE;\n  };\n\n  handlePointerMove = (e) => {\n    let { start, finish } = this.props;\n    const { updateNodeType, drawType } = this.props;\n\n    const realTarget =\n      e.type !== 'touchmove'\n        ? e.target\n        : document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY);\n\n    if (!realTarget.classList.contains('board__node')) {\n      return;\n    }\n\n    const rowIdx = Number(realTarget.dataset.rowIdx);\n    const colIdx = Number(realTarget.dataset.colIdx);\n\n    switch (this.mode) {\n      case DRAGGING_START:\n        if (isStartOrFinishPos(colIdx, rowIdx, start, finish)) {\n          return;\n        }\n        this.moveNodePos(rowIdx, colIdx, start);\n        this.recomputeShortestPath();\n        break;\n      case DRAGGING_FINISH:\n        if (isStartOrFinishPos(colIdx, rowIdx, start, finish)) {\n          return;\n        }\n        this.moveNodePos(rowIdx, colIdx, finish);\n        this.recomputeShortestPath();\n        break;\n      case DRAWING:\n        updateNodeType(rowIdx, colIdx, drawType.current); // NODE_WALL\n        break;\n      case ERASING:\n        updateNodeType(rowIdx, colIdx, NODE_INITIAL);\n        break;\n    }\n  };\n\n  // Helper methods\n  moveNodePos = (rowIdx, colIdx, nodePos) => {\n    const { updateNodeCache } = this.props;\n    const prevX = nodePos.x;\n    const prevY = nodePos.y;\n    nodePos.y = rowIdx;\n    nodePos.x = colIdx;\n    updateNodeCache.get(`${prevY}-${prevX}`).forceNodeUpdate();\n    updateNodeCache.get(`${rowIdx}-${colIdx}`).forceNodeUpdate();\n  };\n\n  recomputeShortestPath = () => {\n    const {\n      canDragToVisualize,\n      clearBoard,\n      initPathfinder,\n      pathfinder,\n    } = this.props;\n    if (canDragToVisualize.current) {\n      clearBoard(false);\n      initPathfinder(false);\n      pathfinder.current.run();\n    }\n  };\n\n  render() {\n    const { board, start, finish, updateNodeCache } = this.props;\n    return (\n      <div\n        id=\"board\"\n        onMouseDown={this.handlePointerDown}\n        onMouseMove={this.handlePointerMove}\n        onTouchStart={this.handlePointerDown}\n        onTouchMove={this.handlePointerMove}\n        onTouchEnd={(e) => e.preventDefault()}\n      >\n        {board.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} id={`row-${rowIdx}`} className=\"board__row\">\n              {row.map((col, colIdx) => {\n                return (\n                  <Node\n                    key={`${rowIdx}-${colIdx}`}\n                    rowIdx={rowIdx}\n                    colIdx={colIdx}\n                    start={start}\n                    finish={finish}\n                    updateNodeCache={updateNodeCache}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}